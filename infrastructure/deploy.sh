#!/bin/bash

# Qivr Cognito Infrastructure Deployment Script
# This script deploys the AWS Cognito User Pools and related infrastructure

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
ENVIRONMENT=${1:-dev}
AWS_REGION=${AWS_REGION:-ap-southeast-2}
TERRAFORM_DIR="./terraform"

echo -e "${GREEN}Qivr Cognito Infrastructure Deployment${NC}"
echo -e "${GREEN}=====================================>${NC}"
echo -e "Environment: ${YELLOW}${ENVIRONMENT}${NC}"
echo -e "AWS Region: ${YELLOW}${AWS_REGION}${NC}"
echo ""

# Check prerequisites
check_prerequisites() {
    echo -e "${YELLOW}Checking prerequisites...${NC}"
    
    # Check Terraform
    if ! command -v terraform &> /dev/null; then
        echo -e "${RED}Terraform is not installed. Please install Terraform first.${NC}"
        exit 1
    fi
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}AWS CLI is not installed. Please install AWS CLI first.${NC}"
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        echo -e "${RED}AWS credentials not configured. Please configure AWS credentials.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✓ Prerequisites checked${NC}"
}

# Create S3 bucket for Terraform state
create_state_bucket() {
    echo -e "${YELLOW}Creating S3 bucket for Terraform state...${NC}"
    
    BUCKET_NAME="qivr-terraform-state"
    
    if aws s3api head-bucket --bucket "${BUCKET_NAME}" 2>/dev/null; then
        echo -e "${GREEN}✓ S3 bucket already exists${NC}"
    else
        aws s3api create-bucket \
            --bucket "${BUCKET_NAME}" \
            --region "${AWS_REGION}" \
            --create-bucket-configuration LocationConstraint="${AWS_REGION}" \
            2>/dev/null || true
        
        # Enable versioning
        aws s3api put-bucket-versioning \
            --bucket "${BUCKET_NAME}" \
            --versioning-configuration Status=Enabled
        
        # Enable encryption
        aws s3api put-bucket-encryption \
            --bucket "${BUCKET_NAME}" \
            --server-side-encryption-configuration '{
                "Rules": [{
                    "ApplyServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                    }
                }]
            }'
        
        echo -e "${GREEN}✓ S3 bucket created${NC}"
    fi
}

# Create DynamoDB table for state locking
create_lock_table() {
    echo -e "${YELLOW}Creating DynamoDB table for state locking...${NC}"
    
    TABLE_NAME="qivr-terraform-locks"
    
    if aws dynamodb describe-table --table-name "${TABLE_NAME}" --region "${AWS_REGION}" 2>/dev/null; then
        echo -e "${GREEN}✓ DynamoDB table already exists${NC}"
    else
        aws dynamodb create-table \
            --table-name "${TABLE_NAME}" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region "${AWS_REGION}"
        
        echo -e "${GREEN}✓ DynamoDB table created${NC}"
    fi
}

# Initialize Terraform
init_terraform() {
    echo -e "${YELLOW}Initializing Terraform...${NC}"
    cd "${TERRAFORM_DIR}"
    
    terraform init \
        -backend-config="bucket=qivr-terraform-state" \
        -backend-config="key=cognito/terraform.tfstate" \
        -backend-config="region=${AWS_REGION}" \
        -backend-config="dynamodb_table=qivr-terraform-locks"
    
    echo -e "${GREEN}✓ Terraform initialized${NC}"
}

# Plan Terraform changes
plan_terraform() {
    echo -e "${YELLOW}Planning Terraform changes...${NC}"
    
    terraform plan \
        -var="environment=${ENVIRONMENT}" \
        -var="aws_region=${AWS_REGION}" \
        -out=tfplan
    
    echo -e "${GREEN}✓ Terraform plan created${NC}"
}

# Apply Terraform changes
apply_terraform() {
    echo -e "${YELLOW}Applying Terraform changes...${NC}"
    
    terraform apply tfplan
    
    echo -e "${GREEN}✓ Terraform changes applied${NC}"
}

# Output configuration
output_config() {
    echo -e "${YELLOW}Generating configuration...${NC}"
    
    # Get outputs
    terraform output -json > outputs.json
    
    # Generate .env files
    echo -e "${YELLOW}Generating .env files...${NC}"
    
    # Patient Portal .env
    cat > ../../apps/patient-portal/.env <<EOF
# Generated by deploy.sh - DO NOT COMMIT TO GIT
VITE_API_URL=http://localhost:5000/api
VITE_COGNITO_USER_POOL_ID=$(terraform output -raw patient_user_pool_id)
VITE_COGNITO_CLIENT_ID=$(terraform output -raw patient_client_id)
VITE_COGNITO_IDENTITY_POOL_ID=$(terraform output -raw patient_identity_pool_id)
VITE_COGNITO_DOMAIN=$(terraform output -raw patient_domain)
VITE_COGNITO_REDIRECT_SIGNIN=http://localhost:3002/auth/callback
VITE_COGNITO_REDIRECT_SIGNOUT=http://localhost:3002/
EOF
    
    # Clinic Dashboard .env
    cat > ../../apps/clinic-dashboard/.env <<EOF
# Generated by deploy.sh - DO NOT COMMIT TO GIT
VITE_API_URL=http://localhost:5000/api
VITE_COGNITO_USER_POOL_ID=$(terraform output -raw clinic_user_pool_id)
VITE_COGNITO_CLIENT_ID=$(terraform output -raw clinic_client_id)
VITE_COGNITO_IDENTITY_POOL_ID=$(terraform output -raw clinic_identity_pool_id)
VITE_COGNITO_DOMAIN=$(terraform output -raw clinic_domain)
VITE_COGNITO_REDIRECT_SIGNIN=http://localhost:3001/auth/callback
VITE_COGNITO_REDIRECT_SIGNOUT=http://localhost:3001/
EOF
    
    echo -e "${GREEN}✓ Configuration files generated${NC}"
    
    # Display important information
    echo ""
    echo -e "${GREEN}==================================${NC}"
    echo -e "${GREEN}Deployment Complete!${NC}"
    echo -e "${GREEN}==================================${NC}"
    echo ""
    echo -e "${YELLOW}Patient Portal:${NC}"
    echo -e "  User Pool ID: $(terraform output -raw patient_user_pool_id)"
    echo -e "  Client ID: $(terraform output -raw patient_client_id)"
    echo -e "  Domain: https://$(terraform output -raw patient_domain).auth.${AWS_REGION}.amazoncognito.com"
    echo ""
    echo -e "${YELLOW}Clinic Dashboard:${NC}"
    echo -e "  User Pool ID: $(terraform output -raw clinic_user_pool_id)"
    echo -e "  Client ID: $(terraform output -raw clinic_client_id)"
    echo -e "  Domain: https://$(terraform output -raw clinic_domain).auth.${AWS_REGION}.amazoncognito.com"
    echo ""
    echo -e "${GREEN}Environment files have been created in:${NC}"
    echo -e "  - apps/patient-portal/.env"
    echo -e "  - apps/clinic-dashboard/.env"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo -e "  1. Configure OAuth providers (Google, Facebook) in AWS Console"
    echo -e "  2. Verify SES email domain for sending emails"
    echo -e "  3. Start the applications with the new configuration"
}

# Main execution
main() {
    check_prerequisites
    create_state_bucket
    create_lock_table
    init_terraform
    plan_terraform
    
    echo ""
    echo -e "${YELLOW}Ready to apply changes. Review the plan above.${NC}"
    read -p "Do you want to continue? (yes/no): " -r
    echo
    
    if [[ $REPLY =~ ^[Yy]es$ ]]; then
        apply_terraform
        output_config
    else
        echo -e "${RED}Deployment cancelled${NC}"
        exit 1
    fi
}

# Run main function
main

