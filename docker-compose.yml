version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: qivr-postgres
    environment:
      POSTGRES_DB: qivr
      POSTGRES_USER: qivr_user
      POSTGRES_PASSWORD: qivr_dev_password
      POSTGRES_EXTENSIONS: uuid-ossp,pgcrypto,postgis
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qivr_user -d qivr"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qivr-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: qivr-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qivr-network

  # LocalStack for AWS Services (Development)
  localstack:
    image: localstack/localstack:latest
    container_name: qivr-localstack
    ports:
      - "4566:4566"  # LocalStack Gateway
      - "4571:4571"  # Elasticsearch (if needed)
    environment:
      - SERVICES=s3,cognito-idp,secretsmanager,kms,ses,sqs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=ap-southeast-2
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infrastructure/localstack:/docker-entrypoint-initaws.d
    networks:
      - qivr-network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: qivr-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: qivr-uploads,qivr-exports,qivr-assets
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - qivr-network

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: qivr-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - qivr-network

  # pgAdmin (Database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: qivr-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@qivr.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - qivr-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: qivr-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infrastructure/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    networks:
      - qivr-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: qivr-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    networks:
      - qivr-network

networks:
  qivr-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  localstack_data:
  minio_data:
  pgadmin_data:
