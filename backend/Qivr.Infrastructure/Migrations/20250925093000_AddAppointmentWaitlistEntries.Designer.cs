// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Qivr.Infrastructure.Data;

#nullable disable

namespace Qivr.Infrastructure.Migrations
{
    [DbContext(typeof(QivrDbContext))]
    [Migration("20250925093000_AddAppointmentWaitlistEntries")]
    partial class AddAppointmentWaitlistEntries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("qivr")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Qivr.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_end");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_start");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("appointment_type");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("uuid")
                        .HasColumnName("cancelled_by");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid")
                        .HasColumnName("clinic_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<string>("ExternalCalendarId")
                        .HasColumnType("text")
                        .HasColumnName("external_calendar_id");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<string>("LocationDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_details");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_type");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("payment_amount");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentNotes")
                        .HasColumnType("text")
                        .HasColumnName("payment_notes");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("text")
                        .HasColumnName("payment_reference");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<Guid>("ProviderId1")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id1");

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reminder_sent_at");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_end");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_start");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_appointments");

                    b.HasIndex("CancelledBy")
                        .HasDatabaseName("ix_appointments_cancelled_by");

                    b.HasIndex("ClinicId")
                        .HasDatabaseName("ix_appointments_clinic_id");

                    b.HasIndex("EvaluationId")
                        .HasDatabaseName("ix_appointments_evaluation_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_appointments_patient_id");

                    b.HasIndex("ProviderId1")
                        .HasDatabaseName("ix_appointments_provider_id1");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_appointments_tenant_id");

                    b.HasIndex("ProviderId", "ScheduledStart", "ScheduledEnd")
                        .IsUnique()
                        .HasDatabaseName("no_double_booking");

                    b.ToTable("appointments", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.AppointmentWaitlistEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("appointment_type");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("FulfilledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fulfilled_at");

                    b.Property<Guid?>("MatchedAppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("matched_appointment_id");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<string>("PreferredDates")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_dates");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_appointment_waitlist_entries");

                    b.HasIndex("MatchedAppointmentId")
                        .HasDatabaseName("ix_appointment_waitlist_entries_matched_appointment_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_appointment_waitlist_entries_patient_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_appointment_waitlist_entries_provider_id");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("ix_appointment_waitlist_entries_tenant_status");

                    b.HasIndex("TenantId", "PatientId", "Status")
                        .HasDatabaseName("ix_appointment_waitlist_entries_tenant_patient_status");

                    b.HasOne("Qivr.Core.Entities.Appointment", "MatchedAppointment")
                        .WithMany()
                        .HasForeignKey("MatchedAppointmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_waitlist_entries_appointments_matched_appointment_id");

                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_waitlist_entries_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_waitlist_entries_users_provider_id");

                    b.ToTable("appointment_waitlist_entries", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.BrandTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccentColor")
                        .HasColumnType("text")
                        .HasColumnName("accent_color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomCss")
                        .HasColumnType("text")
                        .HasColumnName("custom_css");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("text")
                        .HasColumnName("favicon_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text")
                        .HasColumnName("secondary_color");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Typography")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typography");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WidgetConfig")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("widget_config");

                    b.HasKey("Id")
                        .HasName("pk_brand_themes");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brand_themes_tenant_id_name");

                    b.ToTable("brand_themes", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_clinics");

                    b.HasIndex("TenantId", "Name")
                        .HasDatabaseName("ix_clinics_tenant_id_name");

                    b.ToTable("clinics", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message_at");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_conversations");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_conversations_patient_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_conversations_provider_id");

                    b.HasIndex("TenantId", "PatientId")
                        .HasDatabaseName("ix_conversations_tenant_id_patient_id");

                    b.ToTable("conversations", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.ConversationParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_muted");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<DateTime?>("LastReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_read_at");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("left_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("integer")
                        .HasColumnName("unread_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_conversation_participants");

                    b.HasIndex("ConversationId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_conversation_participants_conversation_id_user_id");

                    b.ToTable("conversation_participants", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("document_type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confidential");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<bool>("RequiresReview")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_review");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("storage_path");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UploadedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_documents_patient_id");

                    b.HasIndex("TenantId", "PatientId")
                        .HasDatabaseName("ix_documents_tenant_id_patient_id");

                    b.ToTable("documents", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AiProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ai_processed_at");

                    b.Property<string[]>("AiRiskFlags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("ai_risk_flags");

                    b.Property<string>("AiSummary")
                        .HasColumnType("text")
                        .HasColumnName("ai_summary");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("text")
                        .HasColumnName("chief_complaint");

                    b.Property<string>("ClinicianNotes")
                        .HasColumnType("text")
                        .HasColumnName("clinician_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EvaluationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("evaluation_number");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medical_history");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("QuestionnaireResponses")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questionnaire_responses");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string[]>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("symptoms");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Urgency")
                        .HasColumnType("text")
                        .HasColumnName("urgency");

                    b.HasKey("Id")
                        .HasName("pk_evaluations");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_evaluations_patient_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_evaluations_provider_id");

                    b.HasIndex("ReviewedBy")
                        .HasDatabaseName("ix_evaluations_reviewed_by");

                    b.HasIndex("TenantId", "EvaluationNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_evaluations_tenant_id_evaluation_number");

                    b.ToTable("evaluations", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("DeletedByRecipient")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted_by_recipient");

                    b.Property<bool>("DeletedBySender")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted_by_sender");

                    b.Property<string>("DirectMessageType")
                        .HasColumnType("text")
                        .HasColumnName("direct_message_type");

                    b.Property<string>("DirectPriority")
                        .HasColumnType("text")
                        .HasColumnName("direct_priority");

                    b.Property<Guid>("DirectRecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("direct_recipient_id");

                    b.Property<string>("DirectSubject")
                        .HasColumnType("text")
                        .HasColumnName("direct_subject");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<bool>("IsSystemMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_message");

                    b.Property<Guid?>("ParentMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_message_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<Guid?>("RelatedAppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_appointment_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderName")
                        .HasColumnType("text")
                        .HasColumnName("sender_name");

                    b.Property<string>("SenderRole")
                        .HasColumnType("text")
                        .HasColumnName("sender_role");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("AttachmentId")
                        .HasDatabaseName("ix_messages_attachment_id");

                    b.HasIndex("DirectRecipientId")
                        .HasDatabaseName("ix_messages_direct_recipient_id");

                    b.HasIndex("ParentMessageId")
                        .HasDatabaseName("ix_messages_parent_message_id");

                    b.HasIndex("ConversationId", "SentAt")
                        .HasDatabaseName("ix_messages_conversation_id_sent_at");

                    b.HasIndex("SenderId", "DirectRecipientId")
                        .HasDatabaseName("ix_messages_sender_id_direct_recipient_id");

                    b.ToTable("messages", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reminder_sent_at");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_for");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_notifications_recipient_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_notifications_sender_id");

                    b.HasIndex("TenantId", "RecipientId", "CreatedAt")
                        .HasDatabaseName("ix_notifications_tenant_id_recipient_id_created_at");

                    b.ToTable("notifications", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.NotificationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AppointmentReminders")
                        .HasColumnType("boolean")
                        .HasColumnName("appointment_reminders");

                    b.Property<bool>("ClinicAnnouncements")
                        .HasColumnType("boolean")
                        .HasColumnName("clinic_announcements");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("email_enabled");

                    b.Property<bool>("EvaluationNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("evaluation_notifications");

                    b.Property<bool>("InAppEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("in_app_enabled");

                    b.Property<string>("PreferredTimeZone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_time_zone");

                    b.Property<bool>("PromReminders")
                        .HasColumnType("boolean")
                        .HasColumnName("prom_reminders");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("push_enabled");

                    b.Property<int?>("QuietHoursEnd")
                        .HasColumnType("integer")
                        .HasColumnName("quiet_hours_end");

                    b.Property<int?>("QuietHoursStart")
                        .HasColumnType("integer")
                        .HasColumnName("quiet_hours_start");

                    b.Property<int>("ReminderHoursBefore")
                        .HasColumnType("integer")
                        .HasColumnName("reminder_hours_before");

                    b.Property<bool>("SmsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("sms_enabled");

                    b.Property<bool>("SystemNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("system_notifications");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification_preferences");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_preferences_user_id");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_preferences_tenant_id_user_id");

                    b.ToTable("notification_preferences", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PainMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnatomicalCode")
                        .HasColumnType("text")
                        .HasColumnName("anatomical_code");

                    b.Property<string>("BodyRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body_region");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("evaluation_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("OnsetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("onset_date");

                    b.Property<int>("PainIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("pain_intensity");

                    b.Property<string[]>("PainQuality")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("pain_quality");

                    b.Property<string>("PainType")
                        .HasColumnType("text")
                        .HasColumnName("pain_type");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pain_maps");

                    b.HasIndex("EvaluationId")
                        .HasDatabaseName("ix_pain_maps_evaluation_id");

                    b.ToTable("pain_maps", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromBookingRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AlternativeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("alternative_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("PreferredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("preferred_date");

                    b.Property<Guid>("PromInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("prom_instance_id");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason_for_visit");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("TimePreference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_preference");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prom_booking_requests");

                    b.HasIndex("PromInstanceId")
                        .HasDatabaseName("ix_prom_booking_requests_prom_instance_id");

                    b.HasIndex("TenantId", "PromInstanceId")
                        .HasDatabaseName("ix_prom_booking_requests_tenant_id_prom_instance_id");

                    b.ToTable("prom_booking_requests", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reminder_sent_at");

                    b.Property<string>("ResponseData")
                        .HasColumnType("text")
                        .HasColumnName("response_data");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_for");

                    b.Property<decimal?>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prom_instances");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_prom_instances_patient_id");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_prom_instances_template_id");

                    b.HasIndex("TenantId", "PatientId")
                        .HasDatabaseName("ix_prom_instances_tenant_id_patient_id");

                    b.ToTable("prom_instances", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answers");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid>("PromInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("prom_instance_id");

                    b.Property<string>("PromType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prom_type");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("severity");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prom_responses");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("ix_prom_responses_appointment_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_prom_responses_patient_id");

                    b.HasIndex("PromInstanceId")
                        .HasDatabaseName("ix_prom_responses_prom_instance_id");

                    b.HasIndex("TenantId", "PatientId", "CompletedAt")
                        .HasDatabaseName("ix_prom_responses_tenant_id_patient_id_completed_at");

                    b.ToTable("prom_responses", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("questions");

                    b.Property<string>("ScoringMethod")
                        .HasColumnType("text")
                        .HasColumnName("scoring_method");

                    b.Property<string>("ScoringRules")
                        .HasColumnType("text")
                        .HasColumnName("scoring_rules");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_prom_templates");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_prom_templates_tenant_id_name");

                    b.HasIndex("TenantId", "Key", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_prom_templates_tenant_id_key_version");

                    b.ToTable("prom_templates", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uuid")
                        .HasColumnName("clinic_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("license_number");

                    b.Property<string>("NpiNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("npi_number");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialty");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_providers");

                    b.HasIndex("ClinicId")
                        .HasDatabaseName("ix_providers_clinic_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_providers_user_id");

                    b.HasIndex("TenantId", "UserId", "ClinicId")
                        .HasDatabaseName("ix_providers_tenant_id_user_id_clinic_id");

                    b.ToTable("providers", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plan");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_slug");

                    b.ToTable("tenants", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CognitoSub")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cognito_sub");

                    b.Property<string>("Consent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("consent");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_verified");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferences");

                    b.Property<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CognitoSub")
                        .IsUnique()
                        .HasDatabaseName("ix_users_cognito_sub");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_tenant_id_email");

                    b.ToTable("users", "qivr");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Appointment", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_appointments_users_cancelled_by");

                    b.HasOne("Qivr.Core.Entities.Clinic", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("fk_appointments_clinics_clinic_id");

                    b.HasOne("Qivr.Core.Entities.Evaluation", "Evaluation")
                        .WithMany("Appointments")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_appointments_evaluations_evaluation_id");

                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.User", "Provider")
                        .WithMany("ProviderAppointments")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_users_provider_id");

                    b.HasOne("Qivr.Core.Entities.Provider", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ProviderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_providers_provider_id1");

                    b.HasOne("Qivr.Core.Entities.Tenant", null)
                        .WithMany("Appointments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_tenants_tenant_id");

                    b.Navigation("CancelledByUser");

                    b.Navigation("Evaluation");

                    b.Navigation("Patient");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Qivr.Core.Entities.BrandTheme", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Tenant", "Tenant")
                        .WithMany("BrandThemes")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_brand_themes_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Conversation", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversations_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_conversations_users_provider_id");

                    b.Navigation("Patient");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Qivr.Core.Entities.ConversationParticipant", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_participants_conversations_conversation_id");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Document", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_users_patient_id");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Evaluation", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany("Evaluations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evaluations_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.Provider", null)
                        .WithMany("Evaluations")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_evaluations_providers_provider_id");

                    b.HasOne("Qivr.Core.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_evaluations_users_reviewed_by");

                    b.HasOne("Qivr.Core.Entities.Tenant", null)
                        .WithMany("Evaluations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evaluations_tenants_tenant_id");

                    b.Navigation("Patient");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Message", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Document", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_documents_attachment_id");

                    b.HasOne("Qivr.Core.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_messages_conversations_conversation_id");

                    b.HasOne("Qivr.Core.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("DirectRecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_messages_users_direct_recipient_id");

                    b.HasOne("Qivr.Core.Entities.Message", "ParentMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_messages_parent_message_id");

                    b.HasOne("Qivr.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_sender_id");

                    b.Navigation("Attachment");

                    b.Navigation("Conversation");

                    b.Navigation("ParentMessage");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Notification", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_recipient_id");

                    b.HasOne("Qivr.Core.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_users_sender_id");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Qivr.Core.Entities.NotificationPreferences", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_preferences_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PainMap", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Evaluation", "Evaluation")
                        .WithMany("PainMaps")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pain_maps_evaluations_evaluation_id");

                    b.OwnsOne("Qivr.Core.Entities.PainCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<Guid>("PainMapId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<float>("X")
                                .HasColumnType("real")
                                .HasColumnName("coordinate_x");

                            b1.Property<float>("Y")
                                .HasColumnType("real")
                                .HasColumnName("coordinate_y");

                            b1.Property<float>("Z")
                                .HasColumnType("real")
                                .HasColumnName("coordinate_z");

                            b1.HasKey("PainMapId");

                            b1.ToTable("pain_maps", "qivr");

                            b1.WithOwner()
                                .HasForeignKey("PainMapId")
                                .HasConstraintName("fk_pain_maps_pain_maps_id");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromBookingRequest", b =>
                {
                    b.HasOne("Qivr.Core.Entities.PromInstance", "PromInstance")
                        .WithMany("BookingRequests")
                        .HasForeignKey("PromInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prom_booking_requests_prom_instances_prom_instance_id");

                    b.Navigation("PromInstance");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromInstance", b =>
                {
                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prom_instances_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.PromTemplate", "Template")
                        .WithMany("Instances")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prom_instances_prom_templates_template_id");

                    b.Navigation("Patient");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromResponse", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_prom_responses_appointments_appointment_id");

                    b.HasOne("Qivr.Core.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prom_responses_users_patient_id");

                    b.HasOne("Qivr.Core.Entities.PromInstance", "PromInstance")
                        .WithMany("Responses")
                        .HasForeignKey("PromInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prom_responses_prom_instances_prom_instance_id");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("PromInstance");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Provider", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Clinic", "Clinic")
                        .WithMany("Providers")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_clinics_clinic_id");

                    b.HasOne("Qivr.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_providers_users_user_id");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qivr.Core.Entities.User", b =>
                {
                    b.HasOne("Qivr.Core.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Qivr.Core.Entities.AppointmentWaitlistEntry", b =>
                {
                    b.Navigation("MatchedAppointment");

                    b.Navigation("Patient");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Evaluation", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PainMaps");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromInstance", b =>
                {
                    b.Navigation("BookingRequests");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Qivr.Core.Entities.PromTemplate", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Provider", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Qivr.Core.Entities.Tenant", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BrandThemes");

                    b.Navigation("Evaluations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Qivr.Core.Entities.User", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("PatientAppointments");

                    b.Navigation("ProviderAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
